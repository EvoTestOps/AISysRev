import { z } from "zod";
import axios from "axios";

const prefix = "/api/v1";

// OpenRouter API model listing response schema
// Backend filters this list to show only the ones that support JSON, temperature, seed and top_p.
export const schema = z.object({
  data: z.array(
    z.union([
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.null(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.string(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.string(),
          input_cache_write: z.string(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.string(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.null(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.string(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.null(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.string(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.string(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.null(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.null(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.null(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.string(),
          input_cache_write: z.string(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.null(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.null(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.null(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.string(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
      z.object({
        id: z.string(),
        canonical_slug: z.string(),
        hugging_face_id: z.null(),
        name: z.string(),
        created: z.number(),
        description: z.string(),
        context_length: z.number(),
        architecture: z.object({
          modality: z.string(),
          input_modalities: z.array(z.string()),
          output_modalities: z.array(z.string()),
          tokenizer: z.string(),
          instruct_type: z.string(),
        }),
        pricing: z.object({
          prompt: z.string(),
          completion: z.string(),
          request: z.string(),
          image: z.string(),
          audio: z.string(),
          web_search: z.string(),
          internal_reasoning: z.string(),
          input_cache_read: z.null(),
          input_cache_write: z.null(),
        }),
        top_provider: z.object({
          context_length: z.number(),
          max_completion_tokens: z.number(),
          is_moderated: z.boolean(),
        }),
        per_request_limits: z.null(),
        supported_parameters: z.array(z.string()),
      }),
    ])
  ),
});

export type ModelResponse = z.TypeOf<typeof schema>;

export const retrieve_models = async () => {
  try {
    const res = await axios.get(`${prefix}/openrouter/models`);
    console.log("Fetching models successful", res.data);
    const parsed = schema.parse(res.data);
    return parsed.data;
  } catch (error) {
    console.log("Fetching models unsuccessful", error);
    throw error;
  }
};
