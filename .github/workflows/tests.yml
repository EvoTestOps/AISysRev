name: Tests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  lint-typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
           node-version-file: '.nvmrc'
      - name: Client - Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      - name: Client - Install dependencies
        run: npm ci --cache ~/.npm
        working-directory: client
      - name: Client - Run Typecheck
        run: npm run typecheck
        working-directory: client
      - name: Client - Run ESLint
        run: npm run lint
        working-directory: client
  backend-test:
    runs-on: ubuntu-latest
    needs: lint-typecheck
    env:
      APP_ENV: test
      SECRET_KEY: yoursecretkey
      DB_URL: postgresql+asyncpg://your_username:your_password@postgres:5432/your_database_test
      CELERY_BROKER_URL: redis://redis:6379/0
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ROOT_USER: your_username
      MINIO_ROOT_PASSWORD: minio-secret-key
    services:
      postgres:
        image: postgres:alpine@sha256:fbe21607052bb5c298674f2fd8cf044a63aa3ddf50b81627f894f91f40f50bcb
        env:
          POSTGRES_USER: your_username
          POSTGRES_PASSWORD: your_password
          POSTGRES_DB: your_database_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.4.5-alpine@sha256:0c0142c3cd69bc030ea09fecfa1c1c0c7d0e7d6081be6bb4957804f23d2cf57a
        ports:
          - 6379:6379
      minio:
        image: minio/minio:latest@sha256:064117214caceaa8d8a90ef7caa58f2b2aeb316b5156afe9ee8da5b4d83e12c8
        env:
          MINIO_ROOT_USER: your_username
          MINIO_ROOT_PASSWORD: minio-secret-key
        ports:
          - 9000:9000
          - 9001:9001
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: pip install --upgrade pip && pip install -r server/requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            if pg_isready -h postgres -U your_username; then
              echo "Postgres is ready!"
              exit 0
            fi
            echo "Waiting for Postgres ($i/20)..."
            sleep 2
          done
          echo "Postgres did not become ready in time!" >&2
          exit 1

      - name: Wait for MinIO
        run: |
          for i in {1..20}; do
            if curl -f http://minio:9000/minio/health/live; then
              echo "MinIO is ready!"
              exit 0
            fi
            echo "Waiting for MinIO ($i/20)..."
            sleep 2
          done
          echo "MinIO did not become ready in time!" >&2
          exit 1

      - name: Run Alembic migrations
        run: alembic upgrade head
        working-directory: server

      - name: Run backend pytest
        run: pytest --maxfail=1 --disable-warnings --cov=src
        working-directory: server

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: server/htmlcov/
  build:
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
           node-version-file: '.nvmrc'
      - name: Client - Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      - name: Client - Install dependencies
        run: npm ci --cache ~/.npm
        working-directory: client
      - name: Client - Build client
        run: npm run build
        working-directory: client
  e2e-test:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 60
    env:
      APP_ENV: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
           node-version-file: '.nvmrc'
      - name: Client - Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      - name: Client - Install dependencies
        run: npm ci --cache ~/.npm
        working-directory: client
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: client
      - name: Run Playwright tests
        run: npx playwright test
        working-directory: client
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 30
